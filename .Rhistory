arrange(contrast)
write_csv(secposthoc_table_invert,"outputs/posthoc_sec_table.csv")
## T2 secondary output ---------------------------
T2_secondary <- bind_rows(sec_norm.models,setNames(sec_interact.models,names(sec_norm.models)), sec_simple.models) %>%
arrange(match(outcome, measures_T2))
T2_sec_bf <- sapply(1:12, function(x)
bfrr(T2_secondary$estimate[x],
T2_secondary$SE[x],
sample_df = T2_secondary$df[x],
model = "normal",
mean = 0,
sd = 5,
tail = 1,
criterion = 3,
rr_interval = list(mean = c(-10, 10), sd = c(0, 10)),
precision = 0.05)[-14])
sec_rr <- sapply(1:12, function(x) paste0("HN[", toString(T2_sec_bf[,x]$RR$sd), "]"))
sec_table <- cbind(T2_secondary, unlist(T2_sec_bf[3,]), sec_rr, unlist(T2_sec_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
arrange(match(contrast, h.tests))
write_csv(sec_table,"outputs/sec_table.csv")
kable(T1_table,
caption = "Overview of results at time 1",
col.names = c("Outcome", "Comparison", "$b$", "$SE$", "df", "95% CI", "$t$", "$\\textit{p}$","$B_{{HN}(0, 5)}$", "RR", "Conclusion$^a$"),
digits = 2) %>%
add_header_above(c(" " = 8, "Bayesian inference" = 3)) %>%
kable_styling() %>%
pack_rows("H1: dynamic vs static/no norm", 1, 6) %>%
pack_rows("H2: interaction", 7, 9) %>%
pack_rows("H3: text dynamic vs visual dynamic", 10, 12) %>%
footnote(general_title = "Note.",
general = paste0("CI = confidence interval; $LL$ = lower limit; $UL$ = upper limit. $N$ = ", nrow(no_out)),
alphabet = c("H~0~ = evidence for null hypothesis, no = no conclusion, H~1~ = evidence for alternative hypothesis."),
footnote_as_chunk = T)
kable(T2_table,
caption = "Overview of results at time 2",
col.names = c("Outcome", "Comparison", "$b$", "$SE$", "df", "95% CI", "$t$", "$\\textit{p}$","$B_{{HN}}$", "RR", "Conclusion$^a$"),
digits = 2) %>%
add_header_above(c(" " = 8, "Bayesian inference" = 3)) %>%
kable_styling() %>%
pack_rows("H1: dynamic vs static/no norm", 1, 8) %>%
pack_rows("H2: interaction", 9, 12) %>%
pack_rows("H3: text dynamic vs visual dynamic", 13, 16) %>%
footnote(general_title = "Note.",
general = paste0("CI = confidence interval; $LL$ = lower limit; $UL$ = upper limit. $N$ = ", nrow(no_out)),
alphabet = c("H0 = evidence for null hypothesis, no = no conclusion, H1 = evidence for alternative hypothesis."),
footnote_as_chunk = T)
kable(T1_table,
caption = "Overview of results at time 1",
col.names = c("Outcome", "Comparison", "$b$", "$SE$", "df", "95% CI", "$t$", "$\\textit{p}$","$B_{{HN}(0, 5)}$", "RR", "Conclusion$^a$"),
digits = 2) %>%
add_header_above(c(" " = 8, "Bayesian inference" = 3)) %>%
kable_styling() %>%
pack_rows("H1: dynamic vs static/no norm", 1, 6) %>%
pack_rows("H2: interaction", 7, 9) %>%
pack_rows("H3: text dynamic vs visual dynamic", 10, 12) %>%
footnote(general_title = "Note.",
general = paste0("CI = confidence interval; $LL$ = lower limit; $UL$ = upper limit. $N$ = ", nrow(no_out)),
alphabet = c("H~0~ = evidence for null hypothesis, no = no conclusion, H~1~ = evidence for alternative hypothesis."),
footnote_as_chunk = T)
save(participants, outcomes_T1_desc, T1_table, T1_violin, T1_jitter, T1_interact, T1_interact_overlaid1, T1_interact_overlaid2, T1_interact_overlaid3, file =  "outputs/T1_out.RData")
cbind(T1_outcomes, unlist(T1_bf[3,]), T1_rr, unlist(T1_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
#mutate_all(~ str_replace(., "-", "−")) %>%
str_replace_all(., c("attitude_T1" = "Attitude",
"interest_T1" = "Interest",
"intentionuni_T1" = "Intention")) %>%
#mutate_all(~ str_replace(., "attitude_T1", "Attitude"))
arrange(match(contrast, h.tests))
cbind(T1_outcomes, unlist(T1_bf[3,]), T1_rr, unlist(T1_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
#mutate_all(~ str_replace(., "-", "−")) %>%
str_replace_all(., c("attitude_T1" = "Attitude",
"interest_T1" = "Interest",
"intentionuni_T1" = "Intention"))
T1_table <- cbind(T1_outcomes, unlist(T1_bf[3,]), T1_rr, unlist(T1_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
#mutate_all(~ str_replace(., "-", "−")) %>%
mutate(across(.cols = everything(), str_replace_all(c("attitude_T1" = "Attitude",
"interest_T1" = "Interest",
"intentionuni_T1" = "Intention")))) %>%
#mutate_all(~ str_replace(., "attitude_T1", "Attitude"))
arrange(match(contrast, h.tests))
cbind(T1_outcomes, unlist(T1_bf[3,]), T1_rr, unlist(T1_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
#mutate_all(~ str_replace(., "-", "−")) %>%
mutate(across(.cols = everything(), ~str_replace_all(c("attitude_T1" = "Attitude",
"interest_T1" = "Interest",
"intentionuni_T1" = "Intention")))) %>%
#mutate_all(~ str_replace(., "attitude_T1", "Attitude"))
arrange(match(contrast, h.tests))
cbind(T1_outcomes, unlist(T1_bf[3,]), T1_rr, unlist(T1_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
#mutate_all(~ str_replace(., "-", "−")) %>%
mutate(across(.cols = everything(), list(str_replace("attitude_T1", "Attitude")))) %>%
#mutate_all(~ str_replace(., "attitude_T1", "Attitude"))
arrange(match(contrast, h.tests))
cbind(T1_outcomes, unlist(T1_bf[3,]), T1_rr, unlist(T1_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
#mutate_all(~ str_replace(., "-", "−")) %>%
mutate(across(.cols = everything(), list(str_replace(., "attitude_T1", "Attitude")))) %>%
#mutate_all(~ str_replace(., "attitude_T1", "Attitude"))
arrange(match(contrast, h.tests))
kable(T2_table,
caption = "Overview of results at time 2",
col.names = c("Outcome", "Comparison", "$b$", "$SE$", "df", "95% CI", "$t$", "$\\textit{p}$","$B_{{HN}}$", "RR", "Conclusion$^a$"),
digits = 2) %>%
add_header_above(c(" " = 8, "Bayesian inference" = 3)) %>%
kable_styling() %>%
pack_rows("H1: dynamic vs static/no norm", 1, 8) %>%
pack_rows("H2: interaction", 9, 12) %>%
pack_rows("H3: text dynamic vs visual dynamic", 13, 16) %>%
footnote(general_title = "Note.",
general = paste0("CI = confidence interval; $N$ = ", nrow(no_out)),
alphabet = c("H0 = evidence for null hypothesis, no = no conclusion, H1 = evidence for alternative hypothesis."),
footnote_as_chunk = T)
# Set up ---------------------------
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, emmeans, papaja, bfrr, broom)
no_out <- readRDS("data/no_outliers.rds")
max_FFQ_meat <- round(mad(no_out$FFQ_T1_meat)*3 + median(no_out$FFQ_T1_meat)) # max threshold for univariate outliers on FFQ
complete_cases <- no_out %>%
mutate(FFQ_T2_meat       = rowSums(across(FFQ_T2_2:FFQ_T2_7)),
interest_diff     = interest_T2 - interest_T1,
attitude_diff     = attitude_T2 - attitude_T1,
intention_diff    = intentionuni_T2 - intentionuni_T1,
intention_bi_diff = intentionbi_T2 - intentionbi_T1,
FFQ_meat_diff     = FFQ_T2_meat - FFQ_T1_meat) %>%
filter(!is.na(no_out$FFQ_T2_7))
complete_no_mad <- filter(complete_cases, FFQ_T1_meat <= max_FFQ_meat)
no_fail <- no_out %>%
filter(norm_info == "dynamic" & man_check == "More people are eating less meat"| norm_info == "static" & man_check == "People are eating about the same amount of meat"| norm_info == "none") %>%
mutate(FFQ_T2_meat       = rowSums(across(FFQ_T2_2:FFQ_T2_7)),
interest_diff     = interest_T2 - interest_T1,
attitude_diff     = attitude_T2 - attitude_T1,
intention_diff    = intentionuni_T2 - intentionuni_T1,
intention_bi_diff = intentionbi_T2 - intentionbi_T1,
FFQ_meat_diff     = FFQ_T2_meat - FFQ_T1_meat)
no_fail_mad <-filter(no_fail, FFQ_T1_meat <= max_FFQ_meat)
# No manipulation check fails ---------------------------
## H1 ---------------------------
contrasts_norm <- list(none_vs_dy = c(-1,0,1),
stat_vs_dy = c(0,-1,1))
outcomes_T1 <- c("attitude_T1", "interest_T1", "intentionuni_T1") %>% set_names(.)
h1check.models <- map_df(outcomes_T1, ~ lm(substitute(i ~ norm_info, list(i = as.name(.))), data = no_fail) %>%
emmeans(., "norm_info", contr = contrasts_norm, infer = T) %>%
.$contrasts %>%
summary(), .id = "outcome")
## H2 ---------------------------
h2check.df <- summary(lm(attitude_T1 ~ norm_info*format, data = no_fail)) %>% .$df
h2check.models <- map_df(outcomes_T1, ~
lm(formula(paste0(.x, "~", "norm_info*format")), data = no_fail) %>%
tidy(conf.int=T), .id = "outcome") %>%
filter(term == "norm_infostatic:formattext") %>%
cbind(., h2check.df[2]) %>%
select(1:4, 9, 7:8, 5:6)
## H3 ---------------------------
contrast_interact = list(dytext_vs_dyvis = c(1, -1,  0,  0,  0)) #text vs visual for dynamic only
h3check.models <- map_df(outcomes_T1, ~ lm(formula(paste0(.x, "~", "condition")), data = no_fail) %>%
emmeans(., "condition", contr = contrast_interact, infer = T) %>%
.$contrasts %>%
summary(), .id = "outcome")
## T1 check output ---------------------------
h.tests <- c("stat_vs_dy", "none_vs_dy", "norm_infostatic:formattext", "dytext_vs_dyvis")
T1check_outcomes <- bind_rows(h1check.models,setNames(h2check.models,names(h1check.models)), h3check.models)
T1check_bf <- sapply(1:12, function(x)
bfrr(T1check_outcomes$estimate[x],
T1check_outcomes$SE[x],
sample_df = T1check_outcomes$df[x],
model = "normal",
mean = 0,
sd = 5,
tail = 1,
criterion = 3,
rr_interval = list(mean = c(-10, 10), sd = c(0, 10)),
precision = 0.05)[-14])
T1check_rr <- sapply(1:12, function(x) paste0("HN[", toString(T1check_bf[,x]$RR$sd), "]"))
T1check_rr <- sapply(1:12, function(x) paste0("[", toString(T1check_bf[,x]$RR$sd), "]"))
T1check_table <- cbind(T1check_outcomes, unlist(T1check_bf[3,]), T1check_rr, unlist(T1check_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
arrange(match(contrast, h.tests))
write_csv(T1check_table,"outputs/supplementary/T1check_table.csv")
## H4 ---------------------------
outcomes_T2 <- c("attitude_diff", "interest_diff", "intention_diff", "FFQ_meat_diff") %>% set_names(.)
h4_check.models <- map_df(outcomes_T2[1:3], ~lm(substitute(i ~ norm_info, list(i = as.name(.))), data = no_fail) %>%
emmeans(., "norm_info", contr = contrasts_norm, infer = T) %>%
.$contrasts %>%
summary(), .id = "outcome") %>%
bind_rows(map_df(outcomes_T2[4], ~lm(FFQ_meat_diff ~ norm_info, data = no_fail_mad) %>%
emmeans(., "norm_info", contr = contrasts_norm, infer = T) %>%
.$contrasts %>%
summary(), .id = "outcome"))
## H5 ---------------------------
h5_check.df <- summary(lm(attitude_diff ~ norm_info*format, data = no_fail)) %>% .$df
h5_check.df[4:6] <- summary(lm(attitude_diff ~ norm_info*format, data = no_fail_mad)) %>% .$df
h5_check.models <- map_df(outcomes_T2[1:3], ~
lm(formula(paste0(.x, "~", "norm_info*format")), data = no_fail) %>%
tidy(conf.int=T), .id = "outcome") %>%
filter(term == "norm_infostatic:formattext") %>%
cbind(., h5_check.df[2]) %>%
bind_rows(map_df(outcomes_T2[4], ~
lm(formula(paste0(.x, "~", "norm_info*format")), data = no_fail_mad) %>%
tidy(conf.int=T), .id = "outcome") %>%
filter(term == "norm_infostatic:formattext") %>%
cbind(., h5_check.df[5])) %>%
mutate(`h5_check.df[2]` = coalesce(`h5_check.df[2]`, `h5_check.df[5]`)) %>%
select(1:4, 9, 7:8, 5:6)
## H6 ---------------------------
h6check.models <- map_df(outcomes_T2[1:3], ~ lm(formula(paste0(.x, "~", "condition")), data = no_fail) %>%
emmeans(., "condition", contr = contrast_interact, infer = T) %>%
.$contrasts %>%
summary(), .id = "outcome") %>%
bind_rows(map_df(outcomes_T2[4], ~ lm(FFQ_meat_diff ~ condition, data = no_fail_mad) %>%
emmeans(., "condition", contr = contrast_interact, infer = T) %>%
.$contrasts %>%
summary(), .id = "outcome"))
## T2 check output ---------------------------
T2check_outcomes <- bind_rows(h4_check.models,setNames(h5_check.models,names(h4_check.models)), h6check.models) %>%
arrange(match(outcome, outcomes_T2))
T2check_meat_bf <- sapply(13:16, function(x)
bfrr(T2check_outcomes$estimate[x]*-1,
T2check_outcomes$SE[x],
sample_df = T2check_outcomes$df[x],
model = "normal",
mean = 0,
sd = 1,
tail = 1,
criterion = 3,
rr_interval = list(mean = c(-5, 5), sd = c(0, 5)),
precision = 0.05)[-14])
T2check_bf <- sapply(1:12, function(x)
bfrr(T2check_outcomes$estimate[x],
T2check_outcomes$SE[x],
sample_df = T2check_outcomes$df[x],
model = "normal",
mean = 0,
sd = 5,
tail = 1,
criterion = 3,
rr_interval = list(mean = c(-10, 10), sd = c(0, 10)),
precision = 0.05)[-14]) %>%
cbind(., T2check_meat_bf)
T2check_rr <- sapply(1:16, function(x) paste0("[", toString(T2check_bf[,x]$RR$sd), "]"))
T2check_table <- cbind(T2check_outcomes, unlist(T2check_bf[3,]), T2check_rr, unlist(T2check_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
arrange(match(contrast, h.tests))
write_csv(T2check_table,"outputs/supplementary/T2check_table.csv")
# Complete case analysis ---------------------------
## H4 ---------------------------
h4_comp.models <- map_df(outcomes_T2[1:3], ~lm(substitute(i ~ norm_info, list(i = as.name(.))), data = complete_cases) %>%
emmeans(., "norm_info", contr = contrasts_norm, infer = T) %>%
.$contrasts %>%
summary(), .id = "outcome") %>%
bind_rows(map_df(outcomes_T2[4], ~lm(FFQ_meat_diff ~ norm_info, data = complete_no_mad) %>%
emmeans(., "norm_info", contr = contrasts_norm, infer = T) %>%
.$contrasts %>%
summary(), .id = "outcome"))
## H5 ---------------------------
h5_comp.df <- summary(lm(attitude_diff ~ norm_info*format, data = complete_cases)) %>% .$df
h5_comp.df[4:6] <- summary(lm(attitude_diff ~ norm_info*format, data = complete_no_mad)) %>% .$df
h5_comp.models <- map_df(outcomes_T2[1:3], ~
lm(formula(paste0(.x, "~", "norm_info*format")), data = complete_cases) %>%
tidy(conf.int=T), .id = "outcome") %>%
filter(term == "norm_infostatic:formattext") %>%
cbind(., h5_comp.df[2]) %>%
bind_rows(map_df(outcomes_T2[4], ~
lm(formula(paste0(.x, "~", "norm_info*format")), data = complete_no_mad) %>%
tidy(conf.int=T), .id = "outcome") %>%
filter(term == "norm_infostatic:formattext") %>%
cbind(., h5_comp.df[5])) %>%
mutate(`h5_comp.df[2]` = coalesce(`h5_comp.df[2]`, `h5_comp.df[5]`)) %>%
select(1:4, 9, 7:8, 5:6)
## H6 ---------------------------
h6comp.models <- map_df(outcomes_T2[1:3], ~ lm(formula(paste0(.x, "~", "condition")), data = complete_cases) %>%
emmeans(., "condition", contr = contrast_interact, infer = T) %>%
.$contrasts %>%
summary(), .id = "outcome") %>%
bind_rows(map_df(outcomes_T2[4], ~ lm(FFQ_meat_diff ~ condition, data = complete_no_mad) %>%
emmeans(., "condition", contr = contrast_interact, infer = T) %>%
.$contrasts %>%
summary(), .id = "outcome"))
## complete case output ---------------------------
T2comp_outcomes <- bind_rows(h4_comp.models,setNames(h5_comp.models,names(h4_comp.models)), h6comp.models) %>%
arrange(match(outcome, outcomes_T2))
T2comp_meat_bf <- sapply(13:16, function(x)
bfrr(T2comp_outcomes$estimate[x]*-1,
T2comp_outcomes$SE[x],
sample_df = T2comp_outcomes$df[x],
model = "normal",
mean = 0,
sd = 1,
tail = 1,
criterion = 3,
rr_interval = list(mean = c(-5, 5), sd = c(0, 5)),
precision = 0.05)[-14])
T2comp_bf <- sapply(1:12, function(x)
bfrr(T2comp_outcomes$estimate[x],
T2comp_outcomes$SE[x],
sample_df = T2comp_outcomes$df[x],
model = "normal",
mean = 0,
sd = 5,
tail = 1,
criterion = 3,
rr_interval = list(mean = c(-10, 10), sd = c(0, 10)),
precision = 0.05)[-14]) %>%
cbind(., T2comp_meat_bf)
T2comp_rr <- sapply(1:16, function(x) paste0("HN[", toString(T2comp_bf[,x]$RR$sd), "]"))
T2comp_table <- cbind(T2_outcomes, unlist(T2comp_bf[3,]), T2comp_rr, unlist(T2comp_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
arrange(match(contrast, h.tests))
T2comp_rr <- sapply(1:16, function(x) paste0("[", toString(T2comp_bf[,x]$RR$sd), "]"))
T2comp_table <- cbind(T2_outcomes, unlist(T2comp_bf[3,]), T2comp_rr, unlist(T2comp_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
arrange(match(contrast, h.tests))
write_csv(T2comp_table,"outputs/supplementary/T2complete_table.csv")
T1check_table <- cbind(T1check_outcomes, unlist(T1check_bf[3,]), T1check_rr, unlist(T1check_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
arrange(match(contrast, h.tests))
write_csv(T1check_table,"outputs/supplementary/T1check_table.csv")
write_csv(T1check_table,"outputs/supplementary/T1check_table.csv")
T2check_table <- cbind(T2check_outcomes, unlist(T2check_bf[3,]), T2check_rr, unlist(T2check_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
arrange(match(contrast, h.tests))
write_csv(T2check_table,"outputs/supplementary/T2check_table.csv")
nrow(no_fail)
T2comp_table <- cbind(T2_outcomes, unlist(T2comp_bf[3,]), T2comp_rr, unlist(T2comp_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
arrange(match(contrast, h.tests))
write_csv(T2comp_table,"outputs/supplementary/T2complete_table.csv")
nrow(complete_cases)
sec_table <- cbind(T2_secondary, unlist(T2_sec_bf[3,]), sec_rr, unlist(T2_sec_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
arrange(match(contrast, h.tests))
write_csv(sec_table,"outputs/sec_table.csv")
write_csv(sec_table,"outputs/sec_table.csv")
sec_rr <- sapply(1:12, function(x) paste0("[", toString(T2_sec_bf[,x]$RR$sd), "]"))
sec_table <- cbind(T2_secondary, unlist(T2_sec_bf[3,]), sec_rr, unlist(T2_sec_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
arrange(match(contrast, h.tests))
write_csv(sec_table,"outputs/sec_table.csv")
sec_table
secposthoc_table_invert <- cbind(secposthoc_table, unlist(secposthoc_bf_invert[3,]), secposthoc_rr_invert, unlist(secposthoc_bf_invert[5,])) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
arrange(contrast)
write_csv(secposthoc_table_invert,"outputs/posthoc_sec_table.csv")
diffs_by_cond <- filter(imputed_calc, .imp == 50) %>%
group_by(condition) %>%
summarise(n = n(),
across(c("attitude_T2", "interest_T2","intentionuni_T2"),
list(mean = ~mean(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
se = ~sd(., na.rm = TRUE)/sqrt(n())),
.names = "{.fn}_{.col}"), .groups = "rowwise")
meat_by_cond <- filter(imputed_calc, .imp == 50 & FFQ_T1_meat <= max_FFQ_meat) %>%
group_by(condition) %>%
summarise(n = n(),
across(c("FFQ_T2_meat"),
list(mean = ~mean(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
se = ~sd(., na.rm = TRUE)/sqrt(n())),
.names = "{.fn}_{.col}"), .groups = "rowwise")
write_csv(diffs_by_cond,"outputs/t2_desc.csv")
write_csv(meat_by_cond,"outputs/t2meat_desc.csv")
write_csv(diffs_by_cond,"outputs/t2_desc.csv")
write_csv(meat_by_cond,"outputs/t2meat_desc.csv")
T1_interact
T1_interact_overlaid1
T2_interact
filter(imputed_calc, .imp == 50) %>% #interaction and simple effects PLOT WITHOUT JITTER
filter(condition != "none") %>%
select(c("norm_info", "format", "attitude_T2", "interest_T2", "intentionuni_T2")) %>%
pivot_longer(cols = ends_with("_T2"), names_to = "outcome", values_to = "value") %>%
group_by(norm_info, format, outcome) %>%
summarise(n= n(),
m = mean(value),
se = sd(value)/sqrt(n())) %>%
ggplot(aes(x = norm_info, color = format, group = format, y = m, ymin = m-se, ymax = m+se)) +
facet_wrap(~ outcome, labeller = as_labeller(c('attitude_T2'="Attitude", 'interest_T2'="Interest", 'intentionuni_T2'="Intention"))) +
geom_line(aes(linetype = format, group = format), position = position_dodge(width = 0.9), show.legend = FALSE) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin = m-se, ymax = m+se, group = format), width = 0.2, position = position_dodge(width = 0.9)) +
coord_cartesian(ylim = c(0,100)) +
scale_y_continuous(breaks = seq(0, 100, 10)) +
labs(y = "Value (%)", x = "Norm type", colour = "Format")+
scale_x_discrete(labels= c("Static", "Dynamic")) +
scale_color_discrete(labels= c("Text", "Text + Visual")) +
papaja::theme_apa()
outcomes_change
FFQ_change
filter(imputed_calc, .imp == 50) %>% #interaction and simple effects PLOT WITHOUT JITTER
filter(condition != "none") %>%
select(c("norm_info", "format", "attitude_T2", "interest_T2", "intentionuni_T2")) %>%
pivot_longer(cols = ends_with("_T2"), names_to = "outcome", values_to = "value") %>%
group_by(norm_info, format, outcome) %>%
summarise(n= n(),
m = mean(value),
se = sd(value)/sqrt(n())) %>%
ggplot(aes(x = norm_info, color = format, group = format, y = m, ymin = m-se, ymax = m+se)) +
facet_wrap(~ outcome, labeller = as_labeller(c('attitude_T2'="Attitude", 'interest_T2'="Interest", 'intentionuni_T2'="Intention"))) +
geom_line(aes(linetype = format, group = format), position = position_dodge(width = 0.9), show.legend = FALSE) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin = m-se, ymax = m+se, group = format), width = 0.2, position = position_dodge(width = 0.9)) +
coord_cartesian(ylim = c(0,100)) +
scale_y_continuous(breaks = seq(0, 100, 10)) +
labs(y = "Value (%)", x = "Norm type", colour = "Format")+
scale_x_discrete(labels= c("Static", "Dynamic")) +
scale_color_discrete(labels= c("Text", "Text + Visual")) +
papaja::theme_apa()
hypotheses_table
secposthoc_table
secposthoc_table_invert
h3posthoc_table
h3posthoc_table <- cbind(h3posthoc.models, unlist(h3posthoc_bf[3,]), h3posthoc_rr, unlist(h3posthoc_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
modify_if(., ~is.numeric(.), ~round(., 2))
h3posthoc_table_invert <- cbind(h3posthoc_table, unlist(h3posthoc_bf_invert[3,]), h3posthoc_rr_invert, unlist(h3posthoc_bf_invert[5,])) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
arrange(contrast)
h3posthoc_table_invert
cbind(h3posthoc_table, unlist(h3posthoc_bf_invert[3,]), h3posthoc_rr_invert, unlist(h3posthoc_bf_invert[5,])) %>%
modify_if(., ~is.numeric(.), ~round(., 2))
cbind(h3posthoc_table, unlist(h3posthoc_bf_invert[3,]), h3posthoc_rr_invert, unlist(h3posthoc_bf_invert[5,])) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ")
h3posthoc_table <- cbind(h3posthoc.models, unlist(h3posthoc_bf[3,]), h3posthoc_rr, unlist(h3posthoc_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ")
h3posthoc_table
h3posthoc_table_invert <- cbind(h3posthoc_table, unlist(h3posthoc_bf_invert[3,]), h3posthoc_rr_invert, unlist(h3posthoc_bf_invert[5,])) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ") %>%
arrange(contrast)
cbind(h3posthoc_table, unlist(h3posthoc_bf_invert[3,]), h3posthoc_rr_invert, unlist(h3posthoc_bf_invert[5,])) %>%
modify_if(., ~is.numeric(.), ~round(., 2))
View(sec_table)
contrast_posthoc = list(stext_vs_dtext = c(0, 1, 0, -1,0),
stvis_vs_dyvis = c(1, 0, -1, 0, 0))
h2posthoc.models <- map_df(outcomes_T1, ~ lm(formula(paste0(.x, "~", "condition")), data = no_out) %>%
emmeans(., "condition", contr = contrast_posthoc, infer = T) %>%
.$contrasts %>%
summary(), .id = "outcome")
h2posthoc_bf <- sapply(1:6, function(x)
bfrr(h2posthoc.models$estimate[x],
h2posthoc.models$SE[x],
sample_df = h2posthoc.models$df[x],
model = "normal",
mean = 0,
sd = 5,
tail = 1,
criterion = 3,
rr_interval = list(mean = c(-10, 10), sd = c(0, 10)),
precision = 0.05)[-14])
h2posthoc_rr <- sapply(1:6, function(x) paste0("[", toString(h2posthoc_bf[,x]$RR$sd), "]"))
h2posthoc_table <- cbind(h2posthoc.models, unlist(h2posthoc_bf[3,]), h2posthoc_rr, unlist(h2posthoc_bf[5,])) %>%
mutate(p.value = printp(p.value)) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
unite(CL, c("lower.CL", "upper.CL"), sep = ", ")
h2posthoc_bf_invert <- sapply(1:6, function(x)
bfrr(h2posthoc.models$estimate[x]*-1,
h2posthoc.models$SE[x],
sample_df = h2posthoc.models$df[x],
model = "normal",
mean = 0,
sd = 5,
tail = 1,
criterion = 3,
rr_interval = list(mean = c(-10, 10), sd = c(0, 10)),
precision = 0.05)[-14])
h2posthoc_rr_invert <- sapply(1:6, function(x) paste0("[", toString(h2posthoc_bf_invert[,x]$RR$sd), "]"))
h2posthoc_table_invert <- cbind(h2posthoc_table, unlist(h2posthoc_bf_invert[3,]), h2posthoc_rr_invert, unlist(h2posthoc_bf_invert[5,])) %>%
modify_if(., ~is.numeric(.), ~round(., 2)) %>%
arrange(contrast)
write_csv(h2posthoc_table_invert,"outputs/h2posthoc.csv")
T1_violin
T1_interact
T1_interact_overlaid1
T1_interact_overlaid2
T1_interact_overlaid3
T1_interact_overlaid1
T1_interact_overlaid2
